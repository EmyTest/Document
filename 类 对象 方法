'''实例方法就是类的实例能够使用的方法'''
# class Foo:
#     def __init__(self, name,age):
#         self.name = name
#         self.age = age
#     def hi(self):
#         print(self.name)
#     def agee(self):
#         print(self.age)
# if __name__ == '__main__':
#     foo01 = Foo('letian',19)
#     foo01.hi()
#     foo01.agee()
#     print( type(Foo))
#     print (type(foo01))
#     print (id(foo01))
#     print (id(Foo))

# class Foo:
#     def __init__(this,name):
#         this.name=name
#     def hi(here):函数
#         print(here.name)
# if __name__ == '__main__':
#     foo01 = Foo('letian')
#     foo01.hi()
#     print(type(Foo))
#     print (type(foo01))
#     print (id(foo01))
#     print (id(Foo))

'''静态方法是一种普通，就是位于类定义的命名空间中，
它不会对任何实例类型进行操作。使用装饰器@staticmethod
定义静态方法。类对象和实例都可以调用静态方法：'''
# class Foo:
#     def __init__(self, name):
#         self.name = name
#     def hi(self):
#         print(self.name)
#     @staticmethod
#     def add(a, b):
#         print(a + b)
# if __name__ == '__main__':
#     foo01 = Foo('letian')
#     foo01.hi()
#     foo01.add(1,2)
#     Foo.add(1, 2)

'''类方法是将类本身作为对象进行操作的方法。
类方法使用@classmethod装饰器定义，其第一个
参数是类，约定写为cls。类对象和实例都可以调用类方法'''
# class Foo:
#     name = 'letian '
#     @classmethod
#     def hi(cls, x):
#         print(cls.name * x)
# if __name__ == '__main__':
#     foo01 = Foo()
#     foo01.hi(2)
#     Foo.hi(3)


'''super用来执行父类中的函数'''
# class Foo(object):
#     def hi(self):
#         print('hi,Foo')
# class Foo2(Foo):
#     def hi(self):
#         super(Foo2, self).hi()
# if __name__ == '__main__':
#     foo2 = Foo2()
#     foo2.hi()


'''注意，Foo类必须继承某个类（并且这个继承链开始
于object类），否则会报错。如果改成下面的形式'''



'''类变量定义在类的定义之后，实例变量则是以为self.开头'''
# class Foo(object):
#     val = 0
#     def __init__(self):
#         self.val = 1
# if __name__ == '__main__':
#     foo = Foo()
#     print(foo.val)
#     print(Foo.val)

#
# class Foo(object):
#     val = 0
#     def __init__(self):
#         pass
# if __name__ == '__main__':
#     foo = Foo()
#     print(foo.val)
#     print(Foo.val)


'''调用父类的init方法有两种: '''
class Foo(object):
    def __init__(self):
        self.val = 1
class Foo2(Foo):
    def __init__(self):
        Foo.__init__(self)  #方法一：调用父类的方法
        super(Foo2, self).__init__()#方法二：调用父类的方法
        print(self.val)
if __name__ == '__main__':
    foo2 = Foo2()
