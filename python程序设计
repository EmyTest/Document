eval(str)函数很强大，官方解释为：将字符串str当成有效的表达式来求值并返回计算结果。所以，结合math当成一个计算器很好用。

eval()函数常见作用有： 
1、计算字符串中有效的表达式，并返回结果


2、将字符串转成相应的对象（如list、tuple、dict和string之间的转换）
>>> a = "[[1,2], [3,4], [5,6], [7,8], [9,0]]"
>>> b = eval(a)
>>> b
[[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]
>>> a = "{1:'xx',2:'yy'}"
>>> c = eval(a)
>>> c
{1: 'xx', 2: 'yy'}
>>> a = "(1,2,3,4)"
>>> d = eval(a)
>>> d
(1, 2, 3, 4)


3、将利用反引号转换的字符串再反转回对象
>>> list1 = [1,2,3,4,5]
>>> `list1`
'[1, 2, 3, 4, 5]'
>>> type(`list1`)
<type 'str'>
>>> type(eval(`list1`))
<type 'list'>
>>> a = eval(`list1`)
>>> a
[1, 2, 3, 4, 5]



'''利用字典 比较大小  求其中较大的两个数的平均值：'''

score = []
score.append(eval(input("enter first score: ")))
score.append(eval(input("enter second score: ")))
score.append(eval(input("enter third score: ")))
score.remove(min(score))
average = sum(score)/2
print("average of the two higest scores is {0:.2f}".format(average))




'''
军用时间转换为普通时间
'''

militaryTime = input("enter a militaryTime (0000 to 2359):")
hours = int(militaryTime[0:2])
minutes = int(militaryTime[2:4])
if hours > 12:
    cycle = "pm"
    hours %= 12
else:
    cycle = "am"
    if hours == 0:
        hours = 12
print("the regular time is {0}:{1}{2}".format(hours,minutes,cycle))





python文件路径读取
https://blog.csdn.net/databatman/article/details/49453953






# lakes = ["eric","huron","michigan","ontario","superior"]
# result = ""
# for i in range(len(lakes)):
#     result += lakes[i]
#     if i < len(lakes) - 1:
#         result += ","
# print(result)
#
# lakes = ["eric","huron","michigan","ontario","superior"]
# for result in lakes:
#     print(result)

# 
# lakes = ["eric","huron","michigan","ontario","superior"]
# print(",".join(lakes))




计算句子中的元音字母：
# 
phrase = input("enter the prase: ")
num = 0
for i in phrase:
    if i in["i","e","a","o","u"]:
        num+=1
    print(num)


# total = 0
# phrase = input(" enter a phrase: ")
# phrase.lower()
# for ch in phrase:
#     if ch in "aeiou":
#         total+=1
# print( "count is: ",total)


出错点： 
1、没有大小写处理
2、循环遍历的时候不能用字典表示
3、print的缩进！！！！！！



计算：1+1/2+1/3+1/4+...+1/100的值：
sum = 0
for i in range(1,101):
    sum += 1/i
print("sum = {0:.5f} to five.....".format(sum))






python判断字母是否按字典序列排序


 word = input("enter a word: ")
# firstletetr = ""
# secondletter = ""
# flag = True
# for i in range(0,len(word)-1):
#     firstletetr = word[i]
#     print("diyi",firstletetr)
#     secondletter = word[i+1]
#     print("dier",secondletter)
#     if firstletetr >secondletter:
#         flag = False
#         break
# if flag:
#     print("in order")
# else:
#     print("not in order")


知识点：
1、字符串之间的比较
2.字符串的循环遍历
3.flag判断

print('a'>'b')
print('a'<'b')



单复利：p116 T60
r = 0.05
salary = int(input("salary: "))
print("simple interest  ","compound interest")
for year in range(1,5):
    earn = salary*r*year
    money = salary+earn
    mon = salary*(1+0.05)**year
    print("{0}.${1} \t\t\t\t{2}".format(year,money,mon))
    
    
    
    
    
    求中位数：
    
datas = []
count = int(input("enter the count you want calculate: "))
for i in range (count):
    data = int(input("enter a number: "))
    datas.append(data)
datas.sort()
L=len(datas)
m=L//2
if L%2 == 0:
    media =(datas[m]+datas[m-1])/2
else:
    media =datas[m]
print(media)





####P118 T75：
    一个由r个人组成的小组，至少两个人生日相同的概率为：1-（n/n * n-1/n *...(n-(r-1）)/n  其中n是天数。计算r从21到25 的概率

for r in range(21,26):
    product = 1
    for t in range(1,r):
        product=product*((365-t)/365)
    print("{0}   {1:.3f}".format(r,1-product))
    
    
    
    
    
    
    
##########python  将文件的单词按照字母表的顺序输出

p53：
    文本文件
    infile = open("data.txt",'r')
    listName = [line.rstrip() for line in infile]
    infile.close()
    
    
    
#p118 t76    
infile = open('E:\\state.txt','r')    #读取文件
listname = [line.rstrip() for line in infile]   #用字典表示出来
listname.sort()    #进行排序
print(listname)     #得出结果










？？？？？？

一： 编写一段程序，由一个单词作为输入，然后计算单词中不同原因的数量：

    # word = input("enter a word: ")
    # word = word.upper()
    # vowels = "AEIOU"
    # vowelsFound = []
    # numVowels = 0
    # # print("#",vowelsFound)
    # for letter in word:
    #     if (letter in vowels) and (letter not in vowelsFound):
    #         numVowels += 1
    #         vowelsFound.append(letter)
    #         print(vowelsFound)
    # # print("number of vowels: ",numVowels)
    
  
  
  
  
  
二： 编写一段程序，要求用户输入一句话，然后将所有的字母r去掉
    sentence = input("enter a sentence: ")
    newSentence = ""
    for ch in sentence:
        if ch.upper() != 'R':
            newSentence += ch
    print(newSentence)
    
    
    
    
p119 t83：
    justices = ["scalia r","kennedy r","thomas r","finsburg d","beryer d","roberts r","alito r","sotomayor d","kagan d"]
    demappointtees = []
    repappointees = []
    for justice in justices:
        if justice[-1] =='d':
            demappointtees.append(justice[:-2])
        else:
            repappointees.append(justice[:-2])
    named = ','.join(demappointtees)
    namer = ','.join(repappointees)
    print("demappointtees: ",named)
    print("repappointees: ",namer)


***********：
    1、字典的读取  [-1]  [-2] 的运用
    2、join方法的使用 strVar = ",".join(L)
    3、插入的方法 append()
    
    
    
    
    
    
    
***********************************************   
*     取名字的姓    利用字典 [：firstspace]     *
***********************************************

def firstName(fullName):
    firstSpace = fullName.index(" ")
    print(firstSpace)
    givenName = fullName[:firstSpace]
    return givenName
fullName = input("enter a person's full name: ")
print("first name:",firstName(fullName))
    

####################################################################
元音字母查询
####################################################################


#     word = word.upper()
#     vowels = ('A','E','I','O','U')
#     for vowel in vowels:
#         if vowel not in vowels:
#             return False
#     return True
# word = input('enter a word: ')
# if isVowelWord(word):
#     print(word,'contain every vowel.')
# else:
#     print(word,'does not contain every vowel')



def occurringVowels(word):
    word = word.upper()
    vowels = ('A','E','I','O','U')
    includedVowels = []
    for vowel in vowels:
        if (vowel in word) and (vowel not in includedVowels):
            includedVowels.append(vowel)
    return includedVowels
word = input("enter a word: ")
listOfVowels = occurringVowels(word)
print("the following vowels occur in the word: ",end= ' ')
stringOfVowels = " ".join(listOfVowels)
print(stringOfVowels)









设置画布大小

         turtle.screensize(canvwidth=None, canvheight=None, bg=None)，参数分别为画布的宽(单位像素), 高, 背景颜色。

        如：turtle.screensize(800,600, "green")

               turtle.screensize() #返回默认大小(400, 300)
               
               
               
               
 画笔的属性

        画笔(画笔的属性，颜色、画线的宽度等)

        1) turtle.pensize()：设置画笔的宽度；

        2) turtle.pencolor()：没有参数传入，返回当前画笔颜色，传入参数设置画笔颜色，可以是字符串如"green", "red",也可以是RGB 3元组。

        3) turtle.speed(speed)：设置画笔移动速度，画笔绘制的速度范围[0,10]整数，数字越大越快。
        
        
        
        
        
        
        (1)    画笔运动命令
turtle.forward(distance)
向当前画笔方向移动distance像素长度

turtle.backward(distance)
向当前画笔相反方向移动distance像素长度

turtle.right(degree)
顺时针移动degree°

turtle.left(degree)
逆时针移动degree°

turtle.pendown()
移动时绘制图形，缺省时也为绘制

turtle.goto(x,y)





(2)     画笔控制命令
turtle.fillcolor(colorstring)
绘制图形的填充颜色

turtle.color(color1, color2)
同时设置pencolor=color1, fillcolor=color2

turtle.filling()
返回当前是否在填充状态

turtle.begin_fill()
准备开始填充图形

turtle.end_fill()
填充完成

turtle.hideturtle()
隐藏画笔的turtle形状

turtle.showturtle()
显示画笔的turtle形状




(3)    全局控制命令

turtle.clear()
清空turtle窗口，但是turtle的位置和状态不会改变

turtle.reset()
清空窗口，重置turtle状态为起始状态

turtle.undo()
撤销上一个turtle动作

turtle.isvisible()
返回当前turtle是否可见

stamp()
复制当前图形

turtle.write(s [,font=("font-name",font_size,"font_type")])
写文本，s为文本内容，font是字体的参数，分别为字体名称，大小和类型；font为可选项，font参数也是可选项



(4)    其他命令
turtle.mainloop()或turtle.done()
启动事件循环 -调用Tkinter的mainloop函数。
必须是乌龟图形程序中的最后一个语句。




turtle.mode(mode=None)
设置乌龟模式（“standard”，“logo”或“world”）并执行重置。如果没有给出模式，则返回当前模式。
模式           初始龟标题                   正角度
standard        向右（东）                  逆时针
logo            向上（北）                  顺时针

turtle.delay(delay=None)
设置或返回以毫秒为单位的绘图延迟。

turtle.begin_poly()
开始记录多边形的顶点。当前的乌龟位置是多边形的第一个顶点。

turtle.end_poly()
停止记录多边形的顶点。当前的乌龟位置是多边形的最后一个顶点。将与第一个顶点相连。

turtle.get_poly()
返回最后记录的多边形。


3. 命令详解

        3.1 turtle.circle(radius, extent=None, steps=None)

        描述：以给定半径画圆

        参数：

        radius(半径)：半径为正(负)，表示圆心在画笔的左边(右边)画圆；

        extent(弧度) (optional)；

        steps (optional) (做半径为radius的圆的内切正多边形，多边形边数为steps)。

举例:

circle(50) # 整圆;

circle(50,steps=3) # 三角形;

circle(120, 180) # 半圆


p142 t26 是否可行？？→ →

str=input("请输入一个字符串:")
res={}
for i in str:
    if  i  in res:
        res[i]=res[i]+1
    else:
        res[i]=1
        
        
        
        
t28

def main():
    num = int(input("enter a number"))
    print( num,"!"," is ",number(num))
def number(num):
    if num == 0 or num == 1:
        return 1
    total = 1
    for i in range(2, num + 1):
        total *= i
    return total
main()

注意main函数的传值  number（num）
注意分情况 
注意阶乘的表示 ： total *= i
print(res)
 
 
 
 t29
 
 def main():
    opt1 = option1()
    opt2 = option2()
    print("option 1 = ${0:,.2f}".format(opt1))
    print("option 2 = ${0:,.2f}".format(opt2))

    if opt1 > opt2:
        print("option1 is better")
    elif opt1 == opt2:
        print("both ok")
    else:
        print("option 2 is better")
def option1():
    sum = 0
    for i in range(10):
        sum += 100
    return sum
def option2():

    sum = 0
    daySalary = 1
    for i in range(10):
        sum += daySalary
        daySalary *= 2
    return sum
main()


#***********************************************
for i in range(10):
#         sum += daySalary
#         daySalary *= 2
*************************************************





t30

def main():
    f = input("enter first name:")
    s = input("enter last name: ")
    global salary
    salary = int(input("enter current salary: "))

    print("new salary for ",f,s,":",sal())
def sal():
    if salary <40000:
        total = salary*1.05
    else:
        if salary >= 40000:
            total = (salary-40000)*0.02 + salary + 2000
    return total
main()



SOCIAL_SECURITY_TAX_PATE = 0.062
MEDICARE_TAX_RATE = 0.0145
ADDITIONAL_MEDICARE_TAX_RATE = .009
def main():
    ytdEarnings,curEarnings,totalEarnings = obtainEarnings()
    socialSecurityBenTax = calculateBenTax(ytdEarnings,curEarnings,totalEarnings)
    calculateFICAtax(ytdEarnings,curEarnings,totalEarnings,socialSecurityBenTax)
def obtainEarnings():
    str1 = "enter total earnings for this year...:"
    ytdEarnings = eval(input(str1))
    curEarnings = eval(input("enter earnings for the current pay period: "))
    totalEarnings = ytdEarnings + curEarnings
    return (ytdEarnings,curEarnings,totalEarnings)
def calculateBenTax(ytdEarnings,curEarnings,totalEarnings):
    socialSecurityBenTax = 0
    if totalEarnings < WAGE_BASE:
        socialSecurityBenTax = SOCIAL_SECURITY_TAX_PATE *curEarnings
    elif ytdEarnings < WAGE_BASE:
        socialSecurityBenTax = SOCIAL_SECURITY_TAX_PATE * (WAGE_BASE  -ytdEarnings)
    return socialSecurityBenTax
def calculateFICAtax(ytdEarnings,curEarnings,totalEarnings,socialSecurityBenTax):
    medicareTax = MEDICARE_TAX_RATE * curEarnings
    if ytdEarnings >= 200000:
        medicareTax += ADDITIONAL_MEDICARE_TAX_RATE * curEarnings
    elif totalEarnings > 200000:
        medicareTax += ADDITIONAL_MEDICARE_TAX_RATE * (totalEarnings - 200000)
    ficaTax = socialSecurityBenTax + medicareTax
    print("FICA tax for the current pay period :${0:,.2f}".format(ficaTax))
main()






INTEREST_RATE = 0.04  #annual rate of interest
def main():
    principal = eval(input("enter the amount of the deposit: "))
    numberOfYears = eval(input("enter the number of years: "))
    (bal,intEarned) = balanceAndInterest(principal,numberOfYears)
    print("Balance: ${0:,.2f}     Interest Earned :${1:,.2f}".format(bal,intEarned))
def balanceAndInterest(prin,numYears):
    balance = prin * ((1 + INTEREST_RATE) ** numYears)
    interestEarned = balance - prin
    return (balance,interestEarned)
main()





list.reverse   反向排序

list1 = ["white","blue","red"]
list2 = sorted(list1)
list3 = sorted(list1,reverse=True)   #进行反向排序
list4 = sorted(list1,key=len)
list5 = sorted("spam")
print("2: ",list2)
print("3: ",list3)
print("4: ",list4)
print("5: ",list5)

return:

2:  ['blue', 'red', 'white']
3:  ['white', 'red', 'blue']
4:  ['red', 'blue', 'white']
5:  ['a', 'm', 'p', 's']


********************************************************************8


list1 = ['c','D','a','B']
print(sorted(list1))
print(sorted(list1,key=lambda letter:letter.upper()))

return:

['B', 'D', 'a', 'c']
['a', 'B', 'c', 'D']


lstrip = left strip =去除（字符串）左边的=stip leading=去除（字符串）开始的

rstrip = right strip =去除（字符串）右边的=strip trailling=去除（字符串）末尾的

strip = stip left and right = 去除（字符串的）左边的和右边的=strip leading and trailing = 去除（字符串）开始的和末尾的



计算 邮件费用：

def main():
    weight = float(input("enter the number of ounces: "))
    print("cost:${0:0,.2f}".format(cost(weight)))
def cost(weight):
    return 0.05+0.1*ceil(weight -1)
def ceil(x):
    if int(x) != x:
        return int(x + 1)
    else:
        return x
main()

***********************考虑物品重量为小数的时候的情况


p157   t51 字谜  即判断两个单词是否由相同频率的字母组成

def main():
    word1 = input("enter the first word or pharse: ")
    word2 = input("enter the second word or pharse: ")
    if areAnagrams(word1,word2):
        print("Are anagrams")
    else:
        print("Are not anagrams")
def areAnagrams(word1,word2):
    firstString = word1.lower()
    secondString = word2.lower()
    #字符串的遍历？？
    letters1 = [ch for ch in firstString if 'a' <= ch <= 'z']
    letters2 = [ch for ch in secondString if 'a' <= ch <= 'z']
    letters1.sort()
    letters2.sort()
    #注意返回值，返回单词1 == 单词2
    return (letters1 == letters2)
main()





p157 t52  如果是用函数不知道如何返回  ？？？？？？

a = eval(input("enter grade 1: "))
b = eval(input("enter grade 2: "))
c = eval(input("enter grade 3: "))
d = eval(input("enter grade 4: "))
e = eval(input("enter grade 5: "))
num=[]
num.append(a)
num.append(b)
num.append(c)
num.append(d)
num.append(e)
num.sort()
# print(num)
print("range: ",num[4] - num[2])
print("average: ",(num[2]+num[3]+num[4]) / 3)
# def main():
#     print("range: ",range)
#     print("Average: ",average)
# def range():
#     return  (num[4] - num[2])
#
# def average():
#     return (num[2]+num[3]+num[4]) / 3
# main()




$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
最大素因子    排序              $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


def main():
    numbers = [865,1169,1208,1243,329]
    numbers.sort(key=largestPrimeFactor)
    print("sorted by largest prime factor: ")
    print(numbers)
def largestPrimeFactor(num):
    n = num
    f = 2
    max = 1
    while n > 1:
        if n%f == 0:
            n = int(n/f)
            print("n: ",n)
            if f>max:
                max = f
                print("max: ",max)
        else:
            f += 1
    return max
main()






